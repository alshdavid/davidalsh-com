<% 
  getBlogs = function() {
    const postFolderAbs = path.resolve(dirname(), '..' , '..', '..', 'posts')
    const ls = readDir(postFolderAbs)
    const posts = []
    const all_tags = new Set()

    const HeadingsWithProps = new RegExp("<h[1-6][^>].*?<\/h[1-6]>", "g")
    const HeadingsWithoutProps = new RegExp("<h[1-6]>.*?<\/h[1-6]>", "g")
    const PreTags = new RegExp("<pre>.*?<\/pre>", "g")
    const PreTagsWithProps = new RegExp("<pre[^>].*?<\/pre>", "g")
    const CodeTags = new RegExp("<code>.*?<\/code>", "g")
    const CodeTagsWithPros = new RegExp("<code[^>].*?<\/code>", "g")
    const SpecialCharacters = new RegExp("&.*?;", "g")
    const Sanitize = new RegExp("(<([^>]+)>)", "g")

    for (const itemName of ls) {
      const itemPathAbs = path.join(postFolderAbs, itemName)
      if (itemName.startsWith('_')) continue
      if (itemName === 'api') continue
      if (!stat(itemPathAbs).isDirectory()) continue
      const meta = parseYaml(readFile(path.join(itemPathAbs, 'meta.yaml')))
      
      const preview = meta.description || (renderMarkdown(path.join(itemPathAbs, 'readme.md'), { renderHighlighting: false })
        .replaceAll(HeadingsWithProps, '')
        .replaceAll(HeadingsWithoutProps, '')
        .replaceAll(PreTagsWithProps, '')
        .replaceAll(PreTags, '')
        .replaceAll(CodeTagsWithPros, '')
        .replaceAll(CodeTags, '')
        .replaceAll(Sanitize, '')
        .replaceAll(SpecialCharacters, '')
        .replaceAll('\n', ' ')
        .replaceAll('\t', '')
        .replaceAll('\r', '')
        .substring(0, 500))

      posts.push({ 
        preview,
        ...meta,
      })

      for (const tag of meta.tags) all_tags.add(tag)
    }

    posts.sort((a,b) => new Date(b.publish_date) - new Date(a.publish_date))

    return {
      all_tags: Array.from(all_tags),
      posts,
    }
  }
%>

<%- JSON.stringify(getBlogs(), null, 2) %>